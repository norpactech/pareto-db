-- ---------------------------------------------------------------------------------------
-- Insert: pareto.context_property_type. Generated by Pareto Factoryâ„¢ "Be Consistent"
-- ---------------------------------------------------------------------------------------

DROP FUNCTION IF EXISTS pareto.i_context_property_type;
CREATE FUNCTION pareto.i_context_property_type(
  IN p_id_context UUID, 
  IN p_id_schema UUID, 
  IN p_id_generic_property_type UUID, 
  IN p_length INTEGER, 
  IN p_scale INTEGER, 
  IN p_is_nullable BOOLEAN, 
  IN p_default_value TEXT, 
  IN p_created_by VARCHAR
)
RETURNS pg_resp
AS $$
DECLARE

  c_service_name TEXT := 'i_context_property_type';

  v_metadata     JSONB := '{}'::JSONB;
  v_errors       JSONB := '[]'::JSONB;
  v_val_resp     pareto.pg_val;  
  v_response     pareto.pg_resp;
  v_updated_at   TIMESTAMP;
  
  -- Primary Key Field(s)
  v_id uuid := NULL;

BEGIN

  -- ------------------------------------------------------
  -- Metadata
  -- ------------------------------------------------------

  v_metadata := jsonb_build_object(
    'id_context', p_id_context, 
    'id_schema', p_id_schema, 
    'id_generic_property_type', p_id_generic_property_type, 
    'length', p_length, 
    'scale', p_scale, 
    'is_nullable', p_is_nullable, 
    'default_value', p_default_value, 
    'created_by', p_created_by
  );
  
  -- ------------------------------------------------------
  -- Persist
  -- ------------------------------------------------------
 
  INSERT INTO pareto.context_property_type (
    id_context, 
    id_schema, 
    id_generic_property_type, 
    length, 
    scale, 
    is_nullable, 
    default_value, 
    created_by,
    updated_by
  )
  VALUES (
    p_id_context, 
    p_id_schema, 
    p_id_generic_property_type, 
    p_length, 
    p_scale, 
    p_is_nullable, 
    p_default_value, 
    p_created_by,
    p_created_by
  )
  RETURNING id, updated_at INTO v_id, v_updated_at;

  v_response := (
    'OK',
    jsonb_build_object('id', v_id, 'updated_at', v_updated_at), 
    NULL, 
    '00000',
    'Insert was successful', 
    NULL, 
    NULL
  );
  RETURN v_response;

  -- ------------------------------------------------------
  -- Exceptions
  -- ------------------------------------------------------
  
  EXCEPTION
    WHEN UNIQUE_VIOLATION THEN
      v_response := (
        'ERROR', 
        NULL, 
        jsonb_build_object('type', 'database', 'message', 'A UNIQUE constraint was violated due to duplicate data'), 
        '23514', 
        'A UNIQUE constraint was violated due to duplicate data', 
        'A record already exists in the context_property_type table', 
        'Check the provided data and try again'
      );
      CALL pareto.i_logs(v_response.status, v_response.message, c_service_name, p_created_by, v_metadata);
      RETURN v_response;
  
    WHEN OTHERS THEN
      v_response := (
        'ERROR', 
        NULL, 
        jsonb_build_object('type', 'database', 'message', SQLERRM), 
        SQLSTATE, 
        'An unexpected error occurred', 
        'Check database logs for more details', 
        SQLERRM
      );
      CALL pareto.i_logs(v_response.status, v_response.message, c_service_name, p_created_by, v_metadata);
      RETURN v_response;
  
END;
$$ LANGUAGE plpgsql;
