-- ---------------------------------------------------------------------------------------
-- Insert: pareto.index_property. Generated by Pareto Factoryâ„¢ "Be Consistent"
-- ---------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION pareto.i_index_property(
  IN id_index UUID, 
  IN id_property UUID, 
  IN id_rt_sort_order UUID, 
  IN sequence INTEGER, 
  IN created_by VARCHAR
)
RETURNS pg_resp
AS $$
DECLARE

  c_service_name TEXT := 'i_index_property';

  v_metadata     JSONB := '{}'::JSONB;
  v_errors       JSONB := '[]'::JSONB;
  v_val_resp     pg_val;
  v_response     pg_resp;

  v_updated_at   TIMESTAMPTZ;

  -- Set the Property Variables
  v_id UUID := NULL;
  v_id_index UUID := id_index;
  v_created_by VARCHAR := created_by;
  v_sequence INTEGER := sequence;
  v_id_property UUID := id_property;
  v_id_rt_sort_order UUID := id_rt_sort_order;

BEGIN

  -- ------------------------------------------------------
  -- Metadata
  -- ------------------------------------------------------

  v_metadata := jsonb_build_object(
    'id', id, 
    'id_index', id_index, 
    'created_by', created_by, 
    'sequence', sequence, 
    'id_property', id_property, 
    'id_rt_sort_order', id_rt_sort_order
  );
  
  -- ------------------------------------------------------
  -- Persist
  -- ------------------------------------------------------

  INSERT INTO pareto.index_property (
    id_index, 
    id_property, 
    id_rt_sort_order, 
    sequence, 
    created_by,
    updated_by
  )
  VALUES (
    v_id_index, 
    v_id_property, 
    v_id_rt_sort_order, 
    v_sequence, 
    v_created_by,
    v_created_by
  )
  RETURNING id, updated_at INTO v_id, v_updated_at;

  v_response := (
    'OK',
    jsonb_build_object('id', v_id, 'updated_at', v_updated_at), 
    NULL, 
    '00000',
    'Insert was successful', 
    NULL, 
    NULL
  );
  RETURN v_response;

  -- ------------------------------------------------------
  -- Exceptions
  -- ------------------------------------------------------
  
  EXCEPTION
    WHEN UNIQUE_VIOLATION THEN
      v_response := (
        'ERROR', 
        NULL, 
        NULL, 
        '23514', 
        'A UNIQUE constraint was violated due to duplicate data', 
        'A record already exists in the index_property table', 
        'Check the provided data and try again'
      );
      CALL pareto.i_logs(v_response.status, v_response.message, c_service_name, v_created_by, v_metadata);
      RETURN v_response;
  
    WHEN OTHERS THEN
      v_response := (
        'ERROR', 
        NULL, 
        NULL, 
        SQLSTATE, 
        'An unexpected error occurred', 
        'Check database logs for more details', 
        SQLERRM
      );
      CALL pareto.i_logs(v_response.status, v_response.message, c_service_name, v_created_by, v_metadata);
      RETURN v_response;
  
END;
$$ LANGUAGE plpgsql;
