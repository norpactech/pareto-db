-- ---------------------------------------------------------------------------------------
-- Insert: pareto.cardinality. Generated by Pareto Factoryâ„¢ "Be Consistent"
-- ---------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION pareto.i_cardinality(
  IN id uuid, 
  IN id_property uuid, 
  IN id_object_reference uuid, 
  IN id_rt_cardinality uuid, 
  IN id_rt_cardinality_strength uuid, 
  IN has_referencial_action boolean, 
  IN created_at timestamptz, 
  IN created_by varchar, 
  IN updated_at timestamptz, 
  IN updated_by varchar, 
  IN is_active boolean
)
RETURNS pg_resp
AS $$
DECLARE

  c_service_name TEXT := 'i_cardinality';

  v_metadata     JSONB := '{}'::JSONB;
  v_errors       JSONB := '[]'::JSONB;
  v_val_resp     pg_val;
  v_response     pg_resp;

  v_id           UUID;
  v_updated_at   TIMESTAMPTZ;

  -- Set variables to avoid ambiguous column names
  v_id uuid := id;
  v_id_property uuid := id_property;
  v_id_object_reference uuid := id_object_reference;
  v_id_rt_cardinality uuid := id_rt_cardinality;
  v_id_rt_cardinality_strength uuid := id_rt_cardinality_strength;
  v_has_referencial_action boolean := has_referencial_action;
  v_created_at timestamptz := created_at;
  v_created_by varchar := created_by;
  v_updated_at timestamptz := updated_at;
  v_updated_by varchar := updated_by;
  v_is_active boolean := is_active;

BEGIN

  -- ------------------------------------------------------
  -- Metadata
  -- ------------------------------------------------------

  v_metadata := jsonb_build_object(
    'id', id, 
    'id_property', id_property, 
    'id_object_reference', id_object_reference, 
    'id_rt_cardinality', id_rt_cardinality, 
    'id_rt_cardinality_strength', id_rt_cardinality_strength, 
    'has_referencial_action', has_referencial_action, 
    'created_at', created_at, 
    'created_by', created_by, 
    'updated_at', updated_at, 
    'updated_by', updated_by, 
    'is_active', is_active
  );
  
  -- ------------------------------------------------------
  -- Persist
  -- ------------------------------------------------------

  INSERT INTO pareto.cardinality (
    id, 
    id_property, 
    id_object_reference, 
    id_rt_cardinality, 
    id_rt_cardinality_strength, 
    has_referencial_action, 
    created_at, 
    updated_at, 
    updated_by, 
    is_active, 
    created_by,
    updated_by
  )
  VALUES (
    v_id, 
    v_id_property, 
    v_id_object_reference, 
    v_id_rt_cardinality, 
    v_id_rt_cardinality_strength, 
    v_has_referencial_action, 
    v_created_at, 
    v_updated_at, 
    v_updated_by, 
    v_is_active, 
    v_created_by,
    v_created_by
  )
  RETURNING cardinality.id, cardinality.updated_at INTO v_id, v_updated_at;  

  v_response := (
    'OK', 
    jsonb_build_object('id', v_id, 'updated_at', v_updated_at), 
    NULL, 
    '00000',
    'Insert was successful', 
    NULL, 
    NULL
  );
  RETURN v_response;

  -- ------------------------------------------------------
  -- Exceptions
  -- ------------------------------------------------------
  
  EXCEPTION
    WHEN UNIQUE_VIOLATION THEN
      v_response := (
        'ERROR', 
        NULL, 
        NULL, 
        '23514', 
        'A UNIQUE constraint was violated due to duplicate data', 
        'A record already exists in the cardinality table', 
        'Check the provided data and try again'
      );
      CALL pareto.i_logs(v_response.status, v_response.message, c_service_name, created_by, v_metadata);
      RETURN v_response;
  
    WHEN OTHERS THEN
      v_response := (
        'ERROR', 
        NULL, 
        NULL, 
        SQLSTATE, 
        'An unexpected error occurred', 
        'Check database logs for more details', 
        SQLERRM
      );
      CALL pareto.i_logs(v_response.status, v_response.message, c_service_name, created_by, v_metadata);
      RETURN v_response;
  
END;
$$ LANGUAGE plpgsql;
