-- ---------------------------------------------------------------------------------------
-- Table: pareto.tenant. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.tenant CASCADE;

CREATE TABLE pareto.tenant (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  copyright                        VARCHAR(32)      NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.tenant ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX tenant_alt_key
    ON pareto.tenant(LOWER(name));

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.tenant 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.schema. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.schema CASCADE;

CREATE TABLE pareto.schema (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_tenant                        UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.schema ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX schema_alt_key
    ON pareto.schema(id_tenant, LOWER(name));

ALTER TABLE pareto.schema
  ADD CONSTRAINT schema_id_tenant
  FOREIGN KEY (id_tenant)
  REFERENCES pareto.tenant(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.schema 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.ref_table_type. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.ref_table_type CASCADE;

CREATE TABLE pareto.ref_table_type (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_tenant                        UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.ref_table_type ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX ref_table_type_alt_key
    ON pareto.ref_table_type(id_tenant, LOWER(name));

ALTER TABLE pareto.ref_table_type
  ADD CONSTRAINT ref_table_type_id_tenant
  FOREIGN KEY (id_tenant)
  REFERENCES pareto.tenant(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.ref_table_type 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.ref_tables. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.ref_tables CASCADE;

CREATE TABLE pareto.ref_tables (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_ref_table_type                UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  value                            TEXT             NOT NULL, 
  sequence                         INTEGER          NOT NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.ref_tables ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX ref_tables_alt_key
    ON pareto.ref_tables(id_ref_table_type, LOWER(name));

ALTER TABLE pareto.ref_tables
  ADD CONSTRAINT ref_tables_id_ref_table_type
  FOREIGN KEY (id_ref_table_type)
  REFERENCES pareto.ref_table_type(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.ref_tables 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.user. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.user CASCADE;

CREATE TABLE pareto.user (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  username                         VARCHAR(32)      NOT NULL    CHECK (username ~ '^[a-zA-Z][a-zA-Z0-9_-]{2,31}$'), 
  email                            VARCHAR(126)     NOT NULL    CHECK (email ~ '^[A-Za-z0-9]+([._%+-][A-Za-z0-9]+)*@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'), 
  full_name                        VARCHAR(32)      NOT NULL    CHECK (full_name ~ '^[A-Za-z]{1,32}([-\'' ][A-Za-z]{1,32})*$'), 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.user ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX user_alt_key
    ON pareto.user(LOWER(username));
    
CREATE UNIQUE INDEX user_idx01
    ON pareto.user(LOWER(email));

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.user 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.context. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.context CASCADE;

CREATE TABLE pareto.context (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.context ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX context_alt_key
    ON pareto.context(LOWER(name));

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.context 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.validation. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.validation CASCADE;

CREATE TABLE pareto.validation (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_tenant                        UUID             NOT NULL, 
  id_rt_validation_type            UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  error_msg                        TEXT             NOT NULL, 
  expression                       TEXT             NOT NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.validation ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX validation_alt_key
    ON pareto.validation(id_tenant, LOWER(name));

ALTER TABLE pareto.validation
  ADD CONSTRAINT validation_id_tenant
  FOREIGN KEY (id_tenant)
  REFERENCES pareto.tenant(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.validation
  ADD CONSTRAINT validation_id_rt_validation_type
  FOREIGN KEY (id_rt_validation_type)
  REFERENCES pareto.ref_tables(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.validation 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.generic_data_type. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.generic_data_type CASCADE;

CREATE TABLE pareto.generic_data_type (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_tenant                        UUID             NOT NULL, 
  sequence                         INTEGER          NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  alias                            TEXT             NOT NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.generic_data_type ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX generic_data_type_alt_key
    ON pareto.generic_data_type(LOWER(name));

ALTER TABLE pareto.generic_data_type
  ADD CONSTRAINT generic_data_type_id_tenant
  FOREIGN KEY (id_tenant)
  REFERENCES pareto.tenant(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.generic_data_type 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.generic_data_type_attribute. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.generic_data_type_attribute CASCADE;

CREATE TABLE pareto.generic_data_type_attribute (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_generic_data_type             UUID             NOT NULL, 
  id_rt_attr_data_type             UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.generic_data_type_attribute ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX generic_data_type_attribute_alt_key
    ON pareto.generic_data_type_attribute(id_generic_data_type, LOWER(name));

ALTER TABLE pareto.generic_data_type_attribute
  ADD CONSTRAINT generic_data_type_attribute_id_generic_data_type
  FOREIGN KEY (id_generic_data_type)
  REFERENCES pareto.generic_data_type(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.generic_data_type_attribute
  ADD CONSTRAINT generic_data_type_attribute_id_rt_attr_data_type
  FOREIGN KEY (id_rt_attr_data_type)
  REFERENCES pareto.ref_tables(id);

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.generic_data_type_attribute 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.generic_property_type. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.generic_property_type CASCADE;

CREATE TABLE pareto.generic_property_type (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_generic_data_type             UUID             NOT NULL, 
  id_tenant                        UUID             NOT NULL, 
  id_validation                    UUID             NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  length                           INTEGER          NULL, 
  precision                        INTEGER          NULL, 
  is_nullable                      BOOLEAN          NOT NULL, 
  default_value                    TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.generic_property_type ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX generic_property_type_alt_key
    ON pareto.generic_property_type(id_tenant, LOWER(name));

ALTER TABLE pareto.generic_property_type
  ADD CONSTRAINT generic_property_type_id_generic_data_type
  FOREIGN KEY (id_generic_data_type)
  REFERENCES pareto.generic_data_type(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.generic_property_type
  ADD CONSTRAINT generic_property_type_id_tenant
  FOREIGN KEY (id_tenant)
  REFERENCES pareto.tenant(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.generic_property_type
  ADD CONSTRAINT generic_property_type_id_validation
  FOREIGN KEY (id_validation)
  REFERENCES pareto.validation(id)
  ON DELETE SET NULL;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.generic_property_type 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.context_property_type. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.context_property_type CASCADE;

CREATE TABLE pareto.context_property_type (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_context                       UUID             NOT NULL, 
  id_generic_property_type         UUID             NOT NULL, 
  id_schema                        UUID             NOT NULL, 
  length                           INTEGER          NULL, 
  precision                        INTEGER          NULL, 
  is_nullable                      BOOLEAN          NOT NULL, 
  default_value                    TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.context_property_type ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX context_property_type_alt_key
    ON pareto.context_property_type(id_context, id_schema, id_generic_property_type);

ALTER TABLE pareto.context_property_type
  ADD CONSTRAINT context_property_type_id_context
  FOREIGN KEY (id_context)
  REFERENCES pareto.context(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.context_property_type
  ADD CONSTRAINT context_property_type_id_generic_property_type
  FOREIGN KEY (id_generic_property_type)
  REFERENCES pareto.generic_property_type(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.context_property_type
  ADD CONSTRAINT context_property_type_id_schema
  FOREIGN KEY (id_schema)
  REFERENCES pareto.schema(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.context_property_type 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.context_data_type. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.context_data_type CASCADE;

CREATE TABLE pareto.context_data_type (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_context                       UUID             NOT NULL, 
  id_generic_data_type             UUID             NOT NULL, 
  sequence                         INTEGER          NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  alias                            TEXT             NOT NULL, 
  context_value                    TEXT             NOT NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.context_data_type ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX context_data_type_alt_key
    ON pareto.context_data_type(id_context, LOWER(name));

ALTER TABLE pareto.context_data_type
  ADD CONSTRAINT context_data_type_id_context
  FOREIGN KEY (id_context)
  REFERENCES pareto.context(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.context_data_type
  ADD CONSTRAINT context_data_type_id_generic_data_type
  FOREIGN KEY (id_generic_data_type)
  REFERENCES pareto.generic_data_type(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.context_data_type 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.data_object. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.data_object CASCADE;

CREATE TABLE pareto.data_object (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_schema                        UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  has_identifier                   BOOLEAN          NOT NULL    DEFAULT TRUE, 
  has_audit                        BOOLEAN          NOT NULL    DEFAULT TRUE, 
  has_active                       BOOLEAN          NOT NULL    DEFAULT TRUE, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.data_object ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX data_object_alt_key
    ON pareto.data_object(id_schema, LOWER(name));

ALTER TABLE pareto.data_object
  ADD CONSTRAINT data_object_id_schema
  FOREIGN KEY (id_schema)
  REFERENCES pareto.schema(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.data_object 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.property. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.property CASCADE;

CREATE TABLE pareto.property (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_data_object                   UUID             NOT NULL, 
  id_generic_data_type             UUID             NOT NULL, 
  id_generic_property_type         UUID             NULL, 
  id_validation                    UUID             NULL, 
  sequence                         INTEGER          NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  length                           INTEGER          NULL, 
  precision                        INTEGER          NULL, 
  is_nullable                      BOOLEAN          NOT NULL    DEFAULT FALSE, 
  default_value                    TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.property ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX property_alt_key
    ON pareto.property(id_data_object, LOWER(name));

ALTER TABLE pareto.property
  ADD CONSTRAINT property_id_data_object
  FOREIGN KEY (id_data_object)
  REFERENCES pareto.data_object(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.property
  ADD CONSTRAINT property_id_generic_data_type
  FOREIGN KEY (id_generic_data_type)
  REFERENCES pareto.generic_data_type(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.property
  ADD CONSTRAINT property_id_generic_property_type
  FOREIGN KEY (id_generic_property_type)
  REFERENCES pareto.generic_property_type(id)
  ON DELETE SET NULL;
    
ALTER TABLE pareto.property
  ADD CONSTRAINT property_id_validation
  FOREIGN KEY (id_validation)
  REFERENCES pareto.validation(id)
  ON DELETE SET NULL;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.property 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.index. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.index CASCADE;

CREATE TABLE pareto.index (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_data_object                   UUID             NOT NULL, 
  id_rt_index_type                 UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.index ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX index_alt_key
    ON pareto.index(id_data_object, LOWER(name));

ALTER TABLE pareto.index
  ADD CONSTRAINT index_id_data_object
  FOREIGN KEY (id_data_object)
  REFERENCES pareto.data_object(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.index
  ADD CONSTRAINT index_id_rt_index_type
  FOREIGN KEY (id_rt_index_type)
  REFERENCES pareto.ref_tables(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.index 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.index_property. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.index_property CASCADE;

CREATE TABLE pareto.index_property (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_index                         UUID             NOT NULL, 
  id_property                      UUID             NOT NULL, 
  id_rt_sort_order                 UUID             NOT NULL, 
  sequence                         INTEGER          NOT NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.index_property ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX index_property_alt_key
    ON pareto.index_property(id_index, id_property);

ALTER TABLE pareto.index_property
  ADD CONSTRAINT index_property_id_index
  FOREIGN KEY (id_index)
  REFERENCES pareto.index(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.index_property
  ADD CONSTRAINT index_property_id_property
  FOREIGN KEY (id_property)
  REFERENCES pareto.property(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.index_property
  ADD CONSTRAINT index_property_id_rt_sort_order
  FOREIGN KEY (id_rt_sort_order)
  REFERENCES pareto.ref_tables(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.index_property 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.cardinality. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.cardinality CASCADE;

CREATE TABLE pareto.cardinality (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_property                      UUID             NOT NULL, 
  id_object_reference              UUID             NOT NULL, 
  id_rt_cardinality                UUID             NOT NULL, 
  id_rt_cardinality_strength       UUID             NOT NULL, 
  has_referencial_action           BOOLEAN          NOT NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.cardinality ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX cardinality_alt_key
    ON pareto.cardinality(id_property, id_object_reference);

ALTER TABLE pareto.cardinality
  ADD CONSTRAINT cardinality_id_property
  FOREIGN KEY (id_property)
  REFERENCES pareto.property(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.cardinality
  ADD CONSTRAINT cardinality_id_object_reference
  FOREIGN KEY (id_object_reference)
  REFERENCES pareto.data_object(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.cardinality
  ADD CONSTRAINT cardinality_id_rt_cardinality
  FOREIGN KEY (id_rt_cardinality)
  REFERENCES pareto.ref_tables(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.cardinality
  ADD CONSTRAINT cardinality_id_rt_cardinality_strength
  FOREIGN KEY (id_rt_cardinality_strength)
  REFERENCES pareto.ref_tables(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.cardinality 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.plugin. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.plugin CASCADE;

CREATE TABLE pareto.plugin (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_context                       UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  plugin_service                   TEXT             NOT NULL    CHECK (plugin_service ~ '^[a-z][a-zA-Z0-9_]*$'), 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.plugin ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX plugin_alt_key
    ON pareto.plugin(id_context, LOWER(name));

ALTER TABLE pareto.plugin
  ADD CONSTRAINT plugin_id_context
  FOREIGN KEY (id_context)
  REFERENCES pareto.context(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.plugin 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.project. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.project CASCADE;

CREATE TABLE pareto.project (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_tenant                        UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.project ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX project_alt_key
    ON pareto.project(id_tenant, LOWER(name));

ALTER TABLE pareto.project
  ADD CONSTRAINT project_id_tenant
  FOREIGN KEY (id_tenant)
  REFERENCES pareto.tenant(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.project 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.project_component. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.project_component CASCADE;

CREATE TABLE pareto.project_component (
  id                               UUID             NOT NULL    DEFAULT GEN_RANDOM_UUID(), 
  id_project                       UUID             NOT NULL, 
  id_context                       UUID             NOT NULL, 
  id_plugin                        UUID             NOT NULL, 
  name                             VARCHAR(32)      NOT NULL    CHECK (name ~ '^[A-Za-z0-9_][A-Za-z0-9\s\-,\.&''()*_:]{0,30}[A-Za-z0-9_]$'), 
  description                      TEXT             NULL, 
  structure                        VARCHAR(32)      NOT NULL    CHECK (structure ~ '^[a-z0-9]+(\.[a-z0-9]+)*$'), 
  created_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  created_by                       VARCHAR(32)      NOT NULL, 
  updated_at                       TIMESTAMPTZ      NOT NULL    DEFAULT CURRENT_TIMESTAMP, 
  updated_by                       VARCHAR(32)      NOT NULL, 
  is_active                        BOOLEAN          NOT NULL    DEFAULT TRUE
);

ALTER TABLE pareto.project_component ADD PRIMARY KEY (id);
CREATE UNIQUE INDEX project_component_alt_key
    ON pareto.project_component(id_project, LOWER(name));

ALTER TABLE pareto.project_component
  ADD CONSTRAINT project_component_id_project
  FOREIGN KEY (id_project)
  REFERENCES pareto.project(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.project_component
  ADD CONSTRAINT project_component_id_context
  FOREIGN KEY (id_context)
  REFERENCES pareto.context(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.project_component
  ADD CONSTRAINT project_component_id_plugin
  FOREIGN KEY (id_plugin)
  REFERENCES pareto.plugin(id)
  ON DELETE CASCADE;

CREATE TRIGGER update_at
  BEFORE UPDATE ON pareto.project_component 
    FOR EACH ROW
      EXECUTE FUNCTION update_at();

-- ---------------------------------------------------------------------------------------
-- Table: pareto.project_component_data_object. Generated by Pareto Factory™ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP TABLE IF EXISTS pareto.project_component_data_object CASCADE;

CREATE TABLE pareto.project_component_data_object (
  id_project_component             UUID             NOT NULL, 
  id_data_object                   UUID             NOT NULL
);

ALTER TABLE pareto.project_component_data_object ADD PRIMARY KEY (id_project_component, id_data_object);

ALTER TABLE pareto.project_component_data_object
  ADD CONSTRAINT project_component_data_object_id_project_component
  FOREIGN KEY (id_project_component)
  REFERENCES pareto.project_component(id)
  ON DELETE CASCADE;
    
ALTER TABLE pareto.project_component_data_object
  ADD CONSTRAINT project_component_data_object_id_data_object
  FOREIGN KEY (id_data_object)
  REFERENCES pareto.data_object(id)
  ON DELETE CASCADE;


